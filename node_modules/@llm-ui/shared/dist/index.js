// src/regexMatcher.ts
var regexMatchToLLmOutputMatch = (regexMatch) => {
  if (regexMatch) {
    const matchString = regexMatch[0];
    const startIndex = regexMatch.index;
    const endIndex = startIndex + matchString.length;
    return {
      startIndex,
      endIndex,
      outputRaw: matchString
    };
  }
  return void 0;
};
var regexMatcher = (regex) => (llmOutput) => {
  if (regex.global) {
    throw new Error("regexMatcher does not support global regexes");
  }
  return regexMatchToLLmOutputMatch(llmOutput.match(regex));
};
var regexMatcherGlobal = (regex) => (llmOutput) => {
  if (!regex.global) {
    throw new Error("regexMatcherGlobal does not support non-global regexes");
  }
  const matches = Array.from(llmOutput.matchAll(regex));
  if (!matches) {
    return [];
  }
  return matches.map((m) => regexMatchToLLmOutputMatch(m)).filter((m) => m !== void 0);
};

// src/removeStartEndChars.ts
var removeStartEndChars = (str, { startChar, endChar }) => {
  return str.replaceAll(startChar, "").replaceAll(endChar, "");
};
export {
  regexMatcher,
  regexMatcherGlobal,
  removeStartEndChars
};
//# sourceMappingURL=index.js.map