"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  regexMatcher: () => regexMatcher,
  regexMatcherGlobal: () => regexMatcherGlobal,
  removeStartEndChars: () => removeStartEndChars
});
module.exports = __toCommonJS(src_exports);

// src/regexMatcher.ts
var regexMatchToLLmOutputMatch = (regexMatch) => {
  if (regexMatch) {
    const matchString = regexMatch[0];
    const startIndex = regexMatch.index;
    const endIndex = startIndex + matchString.length;
    return {
      startIndex,
      endIndex,
      outputRaw: matchString
    };
  }
  return void 0;
};
var regexMatcher = (regex) => (llmOutput) => {
  if (regex.global) {
    throw new Error("regexMatcher does not support global regexes");
  }
  return regexMatchToLLmOutputMatch(llmOutput.match(regex));
};
var regexMatcherGlobal = (regex) => (llmOutput) => {
  if (!regex.global) {
    throw new Error("regexMatcherGlobal does not support non-global regexes");
  }
  const matches = Array.from(llmOutput.matchAll(regex));
  if (!matches) {
    return [];
  }
  return matches.map((m) => regexMatchToLLmOutputMatch(m)).filter((m) => m !== void 0);
};

// src/removeStartEndChars.ts
var removeStartEndChars = (str, { startChar, endChar }) => {
  return str.replaceAll(startChar, "").replaceAll(endChar, "");
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  regexMatcher,
  regexMatcherGlobal,
  removeStartEndChars
});
//# sourceMappingURL=index.cjs.map