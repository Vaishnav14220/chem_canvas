import { LLMOutputMatcher, LookBackFunction } from '@llm-ui/react';
import { CodeToHastOptions, HighlighterCore, BundledLanguageInfo, LanguageRegistration } from 'shiki/core';

type CodeBlockOptions = {
    startEndChars: string[];
};
declare const defaultOptions: CodeBlockOptions;

declare const findCompleteCodeBlock: (userOptions?: Partial<CodeBlockOptions>) => LLMOutputMatcher;
declare const findPartialCodeBlock: (userOptions?: Partial<CodeBlockOptions>) => LLMOutputMatcher;

type CodeBlock = {
    language: string | undefined;
    metaString: string | undefined;
    code: string | undefined;
};
type ParseFunction = (codeBlock: string, options?: CodeBlockOptions) => CodeBlock;
declare const parseCompleteMarkdownCodeBlock: ParseFunction;
declare const parsePartialMarkdownCodeBlock: ParseFunction;

declare const codeBlockLookBack: (userOptions?: Partial<CodeBlockOptions>) => LookBackFunction;

type OmitWithExclude<T, ToOmit> = {
    [P in keyof T as Exclude<P, ToOmit>]: T[P];
};
type CodeToHtmlOptions = OmitWithExclude<CodeToHastOptions, "lang"> & {
    lang?: CodeToHastOptions["lang"];
};
type ShikiProps = {
    highlighter: LLMUIHighlighter;
    codeToHtmlOptions: CodeToHtmlOptions;
};
type LLMUIHighlighter = {
    getHighlighter: () => HighlighterCore | undefined;
    highlighterPromise: Promise<HighlighterCore>;
};

type UseCodeBlockToHtmlParams = {
    markdownCodeBlock: string;
    parser?: ParseFunction;
} & ShikiProps;
type UseCodeBlockToHtmlReturn = {
    html: string | undefined;
    code: string;
};
declare const useCodeBlockToHtml: ({ markdownCodeBlock, highlighter, codeToHtmlOptions, parser, }: UseCodeBlockToHtmlParams) => {
    html: string;
    code: string;
};

type UseCodeToHtmlParams = {
    code: string;
} & ShikiProps;
declare const useCodeToHtml: ({ code, highlighter, codeToHtmlOptions, }: UseCodeToHtmlParams) => string;

declare const loadHighlighter: (highlighter: Promise<HighlighterCore>) => LLMUIHighlighter;

declare const allLangs: (bundledLanguagesInfo: BundledLanguageInfo[]) => Promise<{
    default: LanguageRegistration[];
}>[];
type LangAlias = Record<string, string>;
declare const allLangsAlias: (bundledLanguagesInfo: BundledLanguageInfo[]) => LangAlias;

export { type CodeBlockOptions, type CodeToHtmlOptions, type LLMUIHighlighter, type ParseFunction, type ShikiProps, type UseCodeBlockToHtmlParams, type UseCodeBlockToHtmlReturn, type UseCodeToHtmlParams, allLangs, allLangsAlias, codeBlockLookBack, defaultOptions as defaultCodeBlockOptions, findCompleteCodeBlock, findPartialCodeBlock, loadHighlighter, parseCompleteMarkdownCodeBlock, parsePartialMarkdownCodeBlock, useCodeBlockToHtml, useCodeToHtml };
